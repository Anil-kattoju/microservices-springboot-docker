package com.example.venue.controller;


import com.example.venue.VenueApplication;
import com.example.venue.db.domain.Venue;
import com.example.venue.db.repository.VenueRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.context.WebApplicationContext;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;

@WebAppConfiguration
@RunWith(SpringRunner.class)
//@WebMvcTest(value = VenueController.class, secure = false)
@SpringBootTest(classes = {VenueApplication.class})
public class VenueControllerTests {
    private MockMvc mockMvc;

    @Autowired
    private VenueRepository venueRepository;

    @Autowired
    private WebApplicationContext webApplicationContext;

    Venue venue = null;
    List<Venue> venues = new ArrayList<>();

    @Before
    public void setUp() {
        venue = new Venue();
//        venue.setDocId("100");
        venue.setVenueName("Cary");
        venue.setReservationId(999L);
        venue.setAvailable(true);
        venue.setBookingDate("07/01/2017");
        venue.setPersonName("Aniruth Sarathy");
        venue.setActive(true);

        Venue v1, v2 = null;
        v1 = new Venue();
//        v1.setDocId("555");
        v1.setVenueName("Toronto");
        v1.setReservationId(22L);
        v1.setAvailable(true);
        v1.setBookingDate("12/23/1987");
        v1.setPersonName("Boris Rhony");
        v1.setActive(true);

        v2 = new Venue();
//        v2.setDocId("666");
        v2.setVenueName("Chennai");
        v2.setReservationId(22L);
        v2.setAvailable(true);
        v2.setBookingDate("2/15/1723");
        v2.setPersonName("Michael Jackson");
        v2.setActive(true);

        this.mockMvc = webAppContextSetup(webApplicationContext).build();

        this.venueRepository.deleteAll();

        this.venue = venueRepository.save(venue);
        this.venues.add(venueRepository.save(v1));
        this.venues.add(venueRepository.save(v2));
    }

    private MediaType contentType = new MediaType(MediaType.APPLICATION_JSON.getType(),
            MediaType.APPLICATION_JSON.getSubtype(),
            Charset.forName("utf8"));

    @Test
    public void findByReservationIdTest() throws Exception {
        mockMvc.perform(get("/findByReservationId/22"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(contentType))
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[0].venueName", is(this.venues.get(0).getVenueName())))
                .andExpect(jsonPath("$[0].personName", is("Boris Rhony")))
                .andExpect(jsonPath("$[0].bookingDate", is("12/23/1987")))
                .andExpect(jsonPath("$[1].venueName", is(this.venues.get(0).getVenueName())))
                .andExpect(jsonPath("$[1].personName", is("Michael Jackson")))
                .andExpect(jsonPath("$[1].bookingDate", is("2/15/1723")));

    }
}
